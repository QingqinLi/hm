1、权限管理
    为什么要有权限 不同角色对象的权限不同
    开发一套权限的组件 为什么要开发组件 减少重复代码，减轻工作量，高内聚，低耦合
    权限是什么 在web开发中，url相等于权限
    表结构的设计
        权限表
            ID      URL
            1       /customer/list
            2       /customer/add
        用户表
            ID      name    pwd
            1       alex    123
        用户和权限的关系表（多对多）
            ID      user_id     permission_is
            1       1           1
        增加用户角色 角色和用户管理，给角色权限
    写代码
        1、查询出用户的权限，写如session
            内存查询快，不用频繁的查询数据库
        2、读取权限信息，判断是否有权限

    template 中查询不到使用的html的时候，回去app下的template下去找 ，所以放html的template可以放在app下（按照app的注册顺序）--注意不要重复
    对于可以设置的变量，一般放在setting中动态配置，全局的控制放在中间件中
    白名单 ，正则匹配

    动态生成一级菜单：
        修改数据表结构，在权限表中，增加字段，是否为菜单，菜单的icon
        在登录的时候，把菜单信息写入session中，动态生成菜单

    应用rbac组件步骤：
        拷贝rbac组件到新的项目中，并注册app
        配置权限的相关信息
            * 权限相关的配置 *
            #  ###### 权限相关的配置 ######
			PERMISSION_SESSION_KEY = 'permissions'
			MENU_SESSION_KEY = 'menus'
			WHITE_URL_LIST = [
				r'^/login/$',
				r'^/logout/$',
				r'^/reg/$',
				r'^/admin/.*',
			]
		创建与权限相关的表（删除之前的迁移记录）
		    python manage.py makemigrations
		    python manage.py migrate
		录入权限信息
		    创建超级用户
		    录入所有的权限信息
		    创建角色，给角色权限
		    创建用户，给用户角色
		在登录成功之后，写入权限和菜单信息到session
		配置上中间件，进行权限的校验
		使用动态菜单
		    导入静态文件
		    使用inclusion_tag
    动态生成二级菜单

        信息管理
            客户列表
        财务管理
            缴费列表

        单独建一个menu的表，存放一级菜单
        在权限表中，修改字段 增加是否为菜单，是菜单则外键关联一级菜单

    三级菜单：
        信息管理
            客户列表
                添加客户
                编辑客户
                删除客户
                （修改表结构）
    面包屑导航：
        显示走到的路径，最后一级没有跳转链接
        在中间件中 request.breadcrumb_list 存放当前访问的路径
        templatestags中循环展示request.breadcrumb_list中的内容，最后一级目录不需要跳转链接（forloop.last)

    权限控制到按钮级别：
        permissions 写别名 作为permissions_list的key
        filter 判断当前权限是不是当前用户的权限，来控制是否展示相应的按钮

    怎么做权限控制：
        1、url代表权限，是否可以访问
        2、表结构（哪些表， 表中的字段）：
            用户：
                user
                password
                manytomany:roles
            角色：
                title
                manytomany: permissions
            权限：
                title
                url
                foreign: menu
                foreign: self(parent)
                name
            用户角色：
                user
                role
            角色权限：
                role
                permission

            菜单：
                title
                icon
                weight



        3、流程：
            中间件：
                白名单
                breadcrumb_list = ['url', 'title']
                权限的校验
                    从session中获取信息
                        循环权限信息
                            正则
                                匹配成功
                                    pip    是子权限/没有则是二级菜单，不需要向上取路径
                                    pname  取父权限（导航用）


            登录成功后：
                权限信息的初始化
                    ORM
                    数据结构：
                        权限相关：
                            permissions_dict = {
                                'URL别名':{
                                'url', 'name', 'title', 'id', 'pid',
                                }

                            }
                        菜单相关：
                            menu_dict = {
                                '菜单ID': {
                                    'title', 'icon', 'weight',
                                    'children': [
                                        {'url', 'title', 'pid', 'id'}...
                                    ]
                                }
                            }
                        session : 什么是session， 为什么要放在session中

            视图：
                模板：
                    二级菜单
                        inclusion_tag 两重for循环
                        控制访问菜单 一级菜单展开，其他菜单闭合
                    路径导航
                        inclusion_tag
                        循环 request.breadcrumb_list
                    权限粒度控制到按钮级别
                        修改表结构 别名（unique）
                        filter
                            判断当前的路径是不是在权限dict中
                            url反向解析
    如何实现权限控制：
        先说整个流程，再说细节部分
        url代表权限。在中间件中校验权限，使用表来存储权限信息（6张表，主要是权限表（有什么字段））
            二级菜单，为了控制到按钮，加入三级菜单（子关联）-- 子权限使用的时候，菜单展开
            在登录的时候，将权限信息 和 菜单信息写入到session中
            有些功能不需要权限，设置白名单
            动态显示菜单：inclusion_tag,两次循环， js展开闭合的效果，默认选中的效果

权限的批量操作
权限的分配
权限系统的分配

CRM
    客户管理系统  主要是业务逻辑方面

    功能：
        --- 不需要区分用户的
        登录，
        注册
        注销
        修改密码
        --- 需要根据用户区分的权限
        -- 销售
            - 客户列表
                - 公户
                - 私户（根据是否有销售列）
                - 添加，编辑用户
                - 公户、私户的转换
            - 跟进记录
                - 添加 编辑客户跟进记录
            - 报名记录
                - 添加、编辑报名记录
            - 缴费记录
                - 添加 编辑缴费记录
        -- 班主任
            - 班级管理
                - 展示
                - 增加和编辑
            - 课程记录
                - 展示
                - 增加和编辑
            - 学习记录
                - 展示和编辑
                    -modelformset
                        {{ form_set,management_form }]
                        {{ form.id }}
                    - 批量添加  bulk_create

权限系统：
    url代表权限，在中间件中校验权限，白名单
    权限信息的记录：6张表
        菜单表
            title
            icon
            weight
        权限表
            url
            title
            menu 外键
            parent 外键
            name
        角色表
            name
            permissions 多对多
        用户表
            name
            pwd
            roles 多对多

权限系统的应用：
    1、拷贝rbac到新项目中
    2、注册rbac APP 以及相关的配置信息
        PERMISSION_SESSION_KEY = 'permissions'
		MENU_SESSION_KEY = 'menus'
		WHITE_URL_LIST = [
			r'/login/$',
			r'^/logout/$',
			r'^/reg/$',
			r'^/admin/.*',
		]
	3、数据库迁移
	    删除原来的所有迁移文件的记录
	    执行命令
	4、在根目录下的urls.py中添加rbac的相关url
	    权限的url
	    URL(r'rbac', include('rbac.urls', namespace='rbac')),
	5、录入权限信息
	    角色管理
	    菜单管理
	    权限管理
	        录入原系统的URL
	        录入rbac的url
	            批量操作的视图中ignore_namespace_list中去掉rbac
	                获取路由系统中所有的url
	                    router_dict = get_all_url_dict(ignore_namespace_list=['admin'])
	6、分配权限
	    用户关联
	        from rbac.models import User
	        user = models.OneToOneFiled(User, null=True, blank=True)
	    给用户分角色
	    给角色分权限
	7、登录应用权限
	    登录成功后执行init_permission(request, obj)
	    修改init_permission
	        user user.user
	    应用权限校验中间件；
	        'rbac.middlewares.rbac.PermissionMiddleware',
	 8、应用二级菜单和面包屑导航
	    layout
	        block css js content
	    二级菜单
	           <link rel="stylesheet" href="{% static 'css/menu.css' %}">
				{% load rbac %}
                {% menu request %}
				<script src="{% static 'js/menu.js' %}"></script>
	    面包屑导航
	        {% breadcrumb request %}
	 9、权限控制到按钮级别
	    {% load rbac %}
	    {% if request|has_permission:'add_customer' %}
	        <a href="{% url 'add_customer' %}?{{query_params}}" class="btn btn-primary btn-sm">添加</a>
	    {% endif %}













