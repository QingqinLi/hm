vue
    前后端分离的架构
    vue.js
    restframework
    逻辑

    变量定义
        let 没有变量提升（在变量定义之前使用会报undefined）必须等let声明语句执行完之后，变量才能使用，不然会报Uncatch ReferenceError错误
            这在语法上，称为“暂时性死区”（temporal dead zone，简称 TDZ）。

        之前的h5 var定义的变量：只有全局作用域和函数作用域
        let定义的变量：全局作用域 函数作用域 局部作用域{}
            let不能重复定义，
            var重复定义会覆盖
            可以先定义再赋值
            for循环中，let定义的变量在for循环中使用的时候，变量会被固定，不会被干扰
            for (var i = 0; i <10; i++) {
              setTimeout(function() {  // 同步注册回调函数到 异步的 宏任务队列。
                console.log(i);        // 执行此代码时，同步代码for循环已经执行完成
              }, 0);
            }
            // 输出结果
            10   共10个
            // 这里面的知识点： JS的事件循环机制，setTimeout的机制等
            如果把 var改成 let声明：

            // i虽然在全局作用域声明，但是在for循环体局部作用域中使用的时候，变量会被固定，不受外界干扰。
            for (let i = 0; i < 10; i++) {
              setTimeout(function() {
                console.log(i);    //  i 是循环体内局部作用域，不受外界影响。
              }, 0);
            }
            // 输出结果：
            0  1  2  3  4  5  6  7  8 9

        const定义变量
            也没有变量提升
            不能重复定义
            块级作用域
            定义之后不能修改
            定义的时候必须赋值

        ES6的let让js真正拥有了块级作用域，更安全规范

    模板字符串
        反引号进行字符串的拼接
        ${变量名字} 来存储变量

    数据的解构和赋值
        数组的解构和赋值
            let ary = [1, 2, 3]
            let[a, b, c] = ary
            console.log(a, b, c)
        对象的解构和赋值
            let obj = {
            username: 'aaa',
            age: 23
            }
            let {username:user(新的变量名）, age} = obj
            console.log(user, age)
        简单的用途：
            数据的交换：
                let a = 1
                let b = 2
                [a, b] = [b, a]
                console.log(a, b)

    函数的拓展：
        默认值函数
        箭头函数
            //箭头函数 参数 箭头 返回值
            // 如果o个或者多个参数
            () => {}
            // 多个参数
            let bar = (x, y) => {return x+y};
            // 一个参数
            v => v;
            箭头函数的this指向定义时的作用域
            普通函数的this指向调用者的作用域

    类：
        class关键字定义一个类
            必须要有constructor方式（构造方法） 如果没有，使用constructor(){}
            必须使用new来实例化，否则报错
        类的继承 extends
            必须在子类的constructor方法里面写super方法
    模块化编程
    对象的单体模式
        解决箭头函数的this指向问题


    数据模版引擎

    vue.js 2.0代码复用和抽象的主要形式是组件
        常用指令：帮助我们渲染数据
            v-text
            v-html
            v-for
            v-if v-else if v-else
            v-show
                    切换性能：
                        v-show 切换性能高 使用的是display:None
                        v-if append 慢
                    加载性能：
                        v-if块
                        v-show慢

            v-bind v-bind:href="" :class="active" :class="{active: isActive, , , ,}""
            v-on 绑定函数 v-on:click=""
                new Vue({
                    el: "", 属性查找 # .
                    data: {
                        //数据
                    }，
                    methods:{
                        //方法
                        changeColor: function(){},
                        ...
                    }

                })
            v-model 数据随输入变化 双向数据绑定
            计算属性：
                {{sumScore}}
                new Vue({
                    el: '',
                    data:{
                        python: 33,
                        Vue:33
                        },
                    methods:{},
                    computed: { 每次变化都执行 内存中
                        sumScore: function(){
                            return this.python + this.Vue;
                        }
                    }
                    //监听单个数据,已经存在的数据
                    watch:{
                        python: function(){
                            一般是做通知之类的操作
                            alert("python数据被修改"）
                        }
                    }



                })
            监听属性：watch
                    watch:{
                        python: function(){
                            一般是做通知之类的操作
                            alert("python数据被修改"）
                        }
            指令修饰符
                用户输入的都是字符串
                number lazy 懒加载 光标失去焦点再处理 trim
            获取DOM元素 .$refs 元素的ref
                <div ref="myRef">hell0</div>
                <button v-on:click="changecolor"></button>

                new Vue({
                    el:"#app",
                    methods: {
                        changeColor: function(){
                            this.$refs.(div).myRef(element).style.color = 'red',
                        }
                    }
                }
            自定义指令：对普通DOM元素进行底层操作
                // 注册一个全局自定义指令 `v-focus`
                Vue.directive('focus', {
                  // 当被绑定的元素插入到 DOM 中时……
                  inserted: function (el) {
                    // 聚焦元素
                    el.focus()
                  }
                })


                <div v-pos = "isShow"></div>
                Vue.directive("pos", function(el-元素, bindding-绑定的东西){
                    bingding.value; --- 数据 （isShow的值）
                })

            重要：v-model v-show

            elment_ui https://element.eleme.cn/#/zh-CN
            导入，放到vue的下面


vue: 一个库一个框架 前后端分离 渲染数据 渐进式框架


组件：（页面布局）
    组件是可复用的Vue实例，所以他们与new Vue接受相同的选项， 例如date， computed, watch, methods 以及生命周期钩子等，例外，el是实例特有的对象
    全局组件：
        1.1 <div id="app">
            </div>

            Vue.component("全局组件明层", {
                template:`
                    <div>
                        <h1>{{ 使用data数据 }}</h1>
                    </div>
                `
                data(){
                    return {
                        greeting: "hello Vue",
                    }
                }
            }

            let Header = {
                template: `
                    <div>
                        <h1>{{ greeting }}</h1>
                    </div>
                `
                data(){
                    return{
                        ...
                    }
                }
            }

            let App = {
                template: `
                    <div>
                        <my-header></my-header>
                    </div>
                `,
                components: {
                    "my-header": Header, // 嵌套其他的子组件
                },
                //组件的私有数据
                data(){
                    pass
                }
            }

            new Vue({
                el: "#app",
                template: `
                    <div>
                        <my-header></my-header>
                    </div>
                `,
                //子组件最后的入口
                components: {
                    "app-header": Header,
                }
            }

            data必须是函数， 没有el属性


    局部组件：js object对象 除了name，其他与全局组件一样， 简化入口
            注册使用
            2.1 创建局部组件，其实就是创建一个javaScript object
                let Header = {
                    template:`
                    <div>
                    </div>
                    `

                }
            2.2注册
                1 new Vue({
                    el: "#app",
                    template: `<app-header></app-header>`
                    components:{
                        "app-header": Header,
                    }
                })
                2 let App = {
                    template:`
                        <div>
                            <app-header></app-header>
                        </div>
                    `,
                    //嵌套使用
                    components: {
                        "app-header": Header
                    }

                }

    组件放组件
        找到最底层组件数据渲染
    组件的复用：

    父子组件之间的通信
        <script>
            let Header = {
                template:`
                    <div>
                        <h1>{{ fatherData }}</h1>
                    </div>
                `
                props : ["fatherData"]  //子组件接受父组件传递的内容

            };

            let App = {
                template:`
                    <div>
                        <app-header :fatherData="count"></app-header>
                    </div>
                `
                components: {
                    "app-header": Header,
                }
                data(){
                    return {
                        count: 100,
                    }
                }
            }

            new Vue({
                el: "#app",
                template:  `<App></App>`,
                components : {
                    App,
                }
            }
        </script>

    子父组件之间的通信
        let Header = {
            template:`
                <div>
                    <button @click--父组件监听的事件="sendData">点击传递数据给父亲</button>
                </div>
            `,
            methods:{
                sendData: function() {
                    this.$emit("change-size"--传递数据的事件, 0.1--传递的数据)
                }
            }

        }；

        let App = {
            template:`
                <div>
                    <h1>内容</h1>
                    <app-header v-on:change-size="changeSize:></app-header>
                </div>
            `
            components: {
                'app-header': Header
            },
            methods: {
                changeSize: function(value){
                    count += value
                }
            }
        }

        new Vue({
            el:"#app",
            template: `<App></App>`
            components:{
                App,
            }
        }
    混入
        定义
            let mixs = {
                methods: {
                    show: function(){},
                    hide: function(){},
                }
            }
        使用
            mixins(固定写法）: [mixs]

    插槽：https://www.cnblogs.com/chinabin1993/p/9115396.html
    插槽：让组件中的内容可以显示，没有插槽的情况下组件标签内的一些内容是不起作用的，当我在组件中声明了slot元素后，在组件元素内写的内容就可以显示了
        <component><slot>展示的内容</slot></component>
        template: `
            <div>
                <slot><\slot>
            </div>
        `
    具名插槽：有名字的插槽～～， slot一一对应（位置，内容）
        <app-header><div slot="header"></div></app-header>
		template: `
			<div>
				<slot name="header"><slot>
			</div>
			`

    作用域插槽：
        我在组件上的属性，可以在组件元素内使用

生命周期：
    beforemount（挂载） 找到el， 但是不渲染

    挂载：

    destroy之前
    destored 内容还在 虚拟dom，记录修改， diff
    activated
    console.group()





