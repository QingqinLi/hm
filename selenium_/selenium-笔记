selenium 不能定位不可见的元素，dispaly = none的元素实际是不可见的元素
selenium 如何保证操作元素的成功率：
    网速不好的情况下，使用合适的等待时间
    被点击的元素一定要占一定的空间，因为selenium会去点这个元素的中心点，不沾空间的元素算不出来中心点
    被点击的元素不能被其他元素遮挡
    被点击的元素不能在viewport之外，也就是说如果元素必须是可见的或者通过滚动条操作使元素可见
    判断元素是否是可以点击的
如何提高脚本执行速度
    使用高配置的电脑和网络环境
    使用效率更高的语言，比如java>python
    优化代码
    不要盲目加sleep，要尽量显示等待
    对于firefox，考虑使用测试专用的profile，因为每次启动浏览器都会创建一个新的profile，对于这个profile，所有的静态资源都是从服务器直接下载，
    而不死你缓冲加载，导致网络不好的时候用例执行速度特别慢的问题
    chrome和safari浏览器的执行速度看上去是最快的
    可以考虑分布式执行或者使用selenium grid

提升用例的稳定性：
    测试专属的profile，尽量让静态资源缓存
    尽量使用显示等待
    尽量使用测试专用环境，避免踢啊类型的测试同时进行，对测试环境造成干扰

自动化用例的执行策略：
    每日执行：like 每天晚上在主干执行一次
    周期执行：没隔两小时在开发分支执行一次
    动态执行：每次代码有提交就执行

自动化测试尽量不要为单元测试层没做的工作还债

id name class xpath css selector这些属性中，xpath和css更灵活

定位页面上动态加载的元素 显式等待

定位属性动态变化的元素
    找出属性动态变化的规律，根据上下文生成动态属性
selenium的原理设计三个部分，分别是：
    浏览器
    driver：下载的driver
    client：写的代码
    client并不知道浏览器怎么工作的，driver知道，在selenium启动之后，driver充当两服务器的角色，根client和浏览器通信，client根据webdriver协议发送请求
    给driver，driver解析请求，并在浏览器上执行响应的操作，把执行结果返回给client，这就是selenium工作的大致原理
webdriver的协议是什么
    client与driver之间的约定，无论是client是使用什么语言，只要通过这个约定，client就可以准确的高度driver要做什么以及怎么做，webdriver协议
    本身是http协议，数据传输使用json

启动浏览器的时候有那个的是哪个webdriver协议：New Session 如果创建成功，返回sessoinId和capabilities
page object设计模式：用class去表示被测页面，在class中定义页面上的元素和一些该页面上专属的方法
page factory 实际上是官方给出的java page object的工厂模式实现
下拉框选择option：


selenium3 对不同的浏览器驱动进行了规范，如果想使用selenium驱动不同的浏览器，必须单独下载并设置不同的浏览器驱动


selenium等待方式
    因为页面加载太慢／太快造成的元素不可见，需要加等待，等待元素可见再继续运行程序
    1、强制等待 sleep,让程序暂停一段时间后，再继续运行，缺点是不智能，时间太短导致元素没有加载出来，太长浪费时间（在case量很大的死后，会影响
    整体的运行速度）尽量少用
    2、隐性等待-implicitly_wait(),隐形设置时间，在一段时间内网页是否加载完成，如果完成了，就进行下一步，没有加载完成，就会报超时加载
        driver.implicitly_wait(20)
        缺点不智能，随着ajax的发展，页面的元素往往都可以时间局部加载，也就是在整个页面没有加载完的时候，可能我们需要的元素已经加载完成了，那就没有必要再等待整个页面
        的加载，执行进行下一步，隐形等待无法满足这一点，时间设置是全局性的，在开头设置过之后，整个的程序执行过程中都有效，都会等待页面加载完成，不需要每次设置一遍
    3、显性等待WebDriverWait(driver, 20, 0,5).until(expected_conditions.presence_of_element_located(locator)),每过多少秒就查看一次locator
        的元素是否可见，如果可见就停止等待，不可见就继续等到知道超过规定的时间，报超时异常

win10的没有ie，转换为webdriver.Edge()
浏览器和webdriver的对应关系
判断当前页面对不对
    页面元素
    title EC.title_contains()
expected_conditions selenium.webdriver.support.expected_conditions 可以对网页上元素是否存在，可点击等等进行判断，一般而言用于断言或与webdriverwait
配合使用，在webdriverwait中的until和until_not配合使用
    常见方法：是否有alert，某元素的选中状态是否与预期相同，相同则返回True， 不同则返回False 元素是否可以点击， 元素是不是不可访问或者不存在于DOM树中...
class name 有空格的时候不能直接在getElementByClassName("name1 name2") 有空格会报错, 应该使用父级元素定位／

定位到多个，会直接操作第一个元素

操作慢的原因：
    pass


































